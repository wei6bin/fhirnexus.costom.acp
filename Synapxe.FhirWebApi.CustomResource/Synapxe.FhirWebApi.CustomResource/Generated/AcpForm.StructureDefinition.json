
{"resourceType": "StructureDefinition",
  "id": "AcpForm",
  "url": "http://hl7.org/fhir/StructureDefinition/AcpForm",
  "version": "0.1",
  "name": "AcpForm",
  "status": "draft",
  "publisher": "Synapxe",
  "copyright": "Copyright (C) 2024 Synapxe",
  "fhirVersion": "4.3.0",
  "kind": "resource",
  "abstract": false,
  "type": "AcpForm",
  "baseDefinition": "http://hl7.org/fhir/StructureDefinition/DomainResource",
  "derivation": "specialization",
  "differential": {
      "element": [
        {
        "id": "AcpForm",
        "path": "AcpForm",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AcpForm",
          "min": 0,
          "max": "*"
        },
        "constraint": [
          {
            "key": "dom-2",
            "severity": "error",
            "human": "If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            "expression": "contained.contained.empty()",
            "source": "http://hl7.org/fhir/StructureDefinition/DomainResource"
          },
          {
            "key": "dom-4",
            "severity": "error",
            "human": "If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            "expression": "contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            "source": "http://hl7.org/fhir/StructureDefinition/DomainResource"
          },
          {
            "key": "dom-3",
            "severity": "error",
            "human": "If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            "expression": "contained.where(((id.exists() and ('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical) | %resource.descendants().as(uri) | %resource.descendants().as(url)))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists() or descendants().where(as(uri) = '#').exists()).not()).trace('unmatched', id).empty()",
            "source": "http://hl7.org/fhir/StructureDefinition/DomainResource"
          },
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/elementdefinition-bestpractice",
                "valueBoolean": true
              },
              {
                "url": "http://hl7.org/fhir/StructureDefinition/elementdefinition-bestpractice-explanation",
                "valueMarkdown": "When a resource has no narrative, only systems that fully understand the data can display the resource to a human safely. Including a human readable representation in the resource makes for a much more robust eco-system and cheaper handling of resources by intermediary systems. Some ecosystems restrict distribution of resources to only those systems that do fully understand the resources, and as a consequence implementers may believe that the narrative is superfluous. However experience shows that such eco-systems often open up to new participants over time."
              }
            ],
            "key": "dom-6",
            "severity": "warning",
            "human": "A resource should have narrative for robust management",
            "expression": "text.`div`.exists()",
            "source": "http://hl7.org/fhir/StructureDefinition/DomainResource"
          },
          {
            "key": "dom-5",
            "severity": "error",
            "human": "If a resource is contained in another resource, it SHALL NOT have a security label",
            "expression": "contained.meta.security.empty()",
            "source": "http://hl7.org/fhir/StructureDefinition/DomainResource"
          }
        ],
        "mustSupport": false,
        "isModifier": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "Entity. Role, or Act"
          }
        ]
      },
      {
        "id": "AcpForm.oID",
        "path": "AcpForm.oID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.oID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formType",
        "path": "AcpForm.formType",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formType",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions",
        "path": "AcpForm.formQuestions",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AcpForm.formQuestions",
          "min": 0,
          "max": "*"
        },
        "type": [

          {
            "code": "BackboneElement"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.oID",
        "path": "AcpForm.formQuestions.oID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.oID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.questionnaireOID",
        "path": "AcpForm.formQuestions.questionnaireOID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.questionnaireOID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.formType",
        "path": "AcpForm.formQuestions.formType",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.formType",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.formTypeName",
        "path": "AcpForm.formQuestions.formTypeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.formTypeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.diseaseType",
        "path": "AcpForm.formQuestions.diseaseType",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.diseaseType",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.diseaseTypeName",
        "path": "AcpForm.formQuestions.diseaseTypeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.diseaseTypeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions",
        "path": "AcpForm.worksheetQuestions",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AcpForm.worksheetQuestions",
          "min": 0,
          "max": "*"
        },
        "type": [

          {
            "code": "BackboneElement"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.oID",
        "path": "AcpForm.worksheetQuestions.oID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.oID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.worksheetType",
        "path": "AcpForm.worksheetQuestions.worksheetType",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.worksheetType",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.worksheetTypeName",
        "path": "AcpForm.worksheetQuestions.worksheetTypeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.worksheetTypeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.diseaseType",
        "path": "AcpForm.worksheetQuestions.diseaseType",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.diseaseType",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.diseaseTypeName",
        "path": "AcpForm.worksheetQuestions.diseaseTypeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.diseaseTypeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.questionOID",
        "path": "AcpForm.worksheetQuestions.questionOID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.questionOID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.questionTitle",
        "path": "AcpForm.worksheetQuestions.questionTitle",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.questionTitle",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.isMandatory",
        "path": "AcpForm.worksheetQuestions.isMandatory",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.isMandatory",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "boolean"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.displayOrder",
        "path": "AcpForm.worksheetQuestions.displayOrder",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.displayOrder",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.statusCode",
        "path": "AcpForm.worksheetQuestions.statusCode",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.statusCode",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.statusCodeName",
        "path": "AcpForm.worksheetQuestions.statusCodeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.statusCodeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.uI_Version",
        "path": "AcpForm.worksheetQuestions.uI_Version",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.uI_Version",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.infoHTML",
        "path": "AcpForm.worksheetQuestions.infoHTML",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.infoHTML",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions",
        "path": "AcpForm.questions",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AcpForm.questions",
          "min": 0,
          "max": "*"
        },
        "type": [

          {
            "code": "BackboneElement"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.oID",
        "path": "AcpForm.questions.oID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.oID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.questionText",
        "path": "AcpForm.questions.questionText",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.questionText",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.statusCode",
        "path": "AcpForm.questions.statusCode",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.statusCode",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.statusCodeName",
        "path": "AcpForm.questions.statusCodeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.statusCodeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.cSSText",
        "path": "AcpForm.questions.cSSText",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.cSSText",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.styleText",
        "path": "AcpForm.questions.styleText",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.styleText",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions",
        "path": "AcpForm.questionOptions",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AcpForm.questionOptions",
          "min": 0,
          "max": "*"
        },
        "type": [

          {
            "code": "BackboneElement"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.oID",
        "path": "AcpForm.questionOptions.oID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.oID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.questionOID",
        "path": "AcpForm.questionOptions.questionOID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.questionOID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.label",
        "path": "AcpForm.questionOptions.label",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.label",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.type",
        "path": "AcpForm.questionOptions.type",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.type",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.typeRef",
        "path": "AcpForm.questionOptions.typeRef",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.typeRef",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.text",
        "path": "AcpForm.questionOptions.text",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.text",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.value",
        "path": "AcpForm.questionOptions.value",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.value",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.displayOrder",
        "path": "AcpForm.questionOptions.displayOrder",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.displayOrder",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.columnIndex",
        "path": "AcpForm.questionOptions.columnIndex",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.columnIndex",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.cSSText",
        "path": "AcpForm.questionOptions.cSSText",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.cSSText",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.parentOptionOID",
        "path": "AcpForm.questionOptions.parentOptionOID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.parentOptionOID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.controlEvents",
        "path": "AcpForm.questionOptions.controlEvents",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.controlEvents",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.sourceCodeSystem",
        "path": "AcpForm.questionOptions.sourceCodeSystem",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.sourceCodeSystem",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.otherAttributes",
        "path": "AcpForm.questionOptions.otherAttributes",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.otherAttributes",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.statusCode",
        "path": "AcpForm.questionOptions.statusCode",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.statusCode",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.statusCodeName",
        "path": "AcpForm.questionOptions.statusCodeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.statusCodeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        }
          ]
         },
  "snapshot": {
      "element": [

        {
        "id": "AcpForm",
        "path": "AcpForm",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AcpForm",
          "min": 0,
          "max": "*"
        },
        "constraint": [
          {
            "key": "dom-2",
            "severity": "error",
            "human": "If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            "expression": "contained.contained.empty()",
            "source": "http://hl7.org/fhir/StructureDefinition/DomainResource"
          },
          {
            "key": "dom-4",
            "severity": "error",
            "human": "If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            "expression": "contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            "source": "http://hl7.org/fhir/StructureDefinition/DomainResource"
          },
          {
            "key": "dom-3",
            "severity": "error",
            "human": "If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            "expression": "contained.where(((id.exists() and ('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical) | %resource.descendants().as(uri) | %resource.descendants().as(url)))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists() or descendants().where(as(uri) = '#').exists()).not()).trace('unmatched', id).empty()",
            "source": "http://hl7.org/fhir/StructureDefinition/DomainResource"
          },
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/elementdefinition-bestpractice",
                "valueBoolean": true
              },
              {
                "url": "http://hl7.org/fhir/StructureDefinition/elementdefinition-bestpractice-explanation",
                "valueMarkdown": "When a resource has no narrative, only systems that fully understand the data can display the resource to a human safely. Including a human readable representation in the resource makes for a much more robust eco-system and cheaper handling of resources by intermediary systems. Some ecosystems restrict distribution of resources to only those systems that do fully understand the resources, and as a consequence implementers may believe that the narrative is superfluous. However experience shows that such eco-systems often open up to new participants over time."
              }
            ],
            "key": "dom-6",
            "severity": "warning",
            "human": "A resource should have narrative for robust management",
            "expression": "text.`div`.exists()",
            "source": "http://hl7.org/fhir/StructureDefinition/DomainResource"
          },
          {
            "key": "dom-5",
            "severity": "error",
            "human": "If a resource is contained in another resource, it SHALL NOT have a security label",
            "expression": "contained.meta.security.empty()",
            "source": "http://hl7.org/fhir/StructureDefinition/DomainResource"
          }
        ],
        "mustSupport": false,
        "isModifier": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "Entity. Role, or Act"
          }
        ]
      },
      {
        "id": "AcpForm.id",
        "path": "AcpForm.id",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Resource.id",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueString": "id"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "isModifier": false
      },
      {
        "id": "AcpForm.meta",
        "path": "AcpForm.meta",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Resource.meta",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Meta"
          }
        ],
        "isModifier": false
      },
      {
        "id": "AcpForm.implicitRules",
        "path": "AcpForm.implicitRules",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Resource.implicitRules",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "uri"
          }
        ],
        "isModifier": true
      },
      {
        "id": "AcpForm.language",
        "path": "AcpForm.language",
        "min": 0,
        "max": "1",
        "base": {
          "path": "Resource.language",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "code"
          }
        ],
        "isModifier": false
      },
      {
        "id": "AcpForm.text",
        "path": "AcpForm.text",
        "min": 0,
        "max": "1",
        "base": {
          "path": "DomainResource.text",
          "min": 0,
          "max": "1"
        },
        "type": [
          {
            "code": "Narrative"
          }
        ],
        "isModifier": false
      },
      {
        "id": "AcpForm.contained",
        "path": "AcpForm.contained",
        "min": 0,
        "max": "*",
        "base": {
          "path": "DomainResource.contained",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Resource"
          }
        ],
        "isModifier": false
      },
      {
        "id": "AcpForm.extension",
        "path": "AcpForm.extension",
        "min": 0,
        "max": "*",
        "base": {
          "path": "DomainResource.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": false
      },
      {
        "id": "AcpForm.modifierExtension",
        "path": "AcpForm.modifierExtension",
        "min": 0,
        "max": "*",
        "base": {
          "path": "DomainResource.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "isModifier": true
      },
      {
        "id": "AcpForm.oID",
        "path": "AcpForm.oID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.oID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formType",
        "path": "AcpForm.formType",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formType",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions",
        "path": "AcpForm.formQuestions",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AcpForm.formQuestions",
          "min": 0,
          "max": "*"
        },
        "type": [

          {
            "code": "BackboneElement"
          }            ],
        "isModifier": false
        },

       {"id": "AcpForm.formQuestions.id",
       "path": "AcpForm.formQuestions.id",
       "min": 0,
       "max": "1",
       "base": {
            "path": "Element.id",
            "min": 0,
            "max": "1"
          },
       "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueUrl": "string"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
       },
     {
        "id": "AcpForm.formQuestions.extension",
        "path": "AcpForm.formQuestions.extension",
        "short": "Additional content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "Element.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "xpath": "@value|f:*|h:div",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "xpath": "exists(f:extension)!=exists(f:*[starts-with(local-name(.), \"value\")])",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "id": "AcpForm.formQuestions.modifierExtension",
        "path": "AcpForm.formQuestions.modifierExtension",
        "short": "Extensions that cannot be ignored even if unrecognized",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "requirements": "Modifier extensions allow for extensions that *cannot* be safely ignored to be clearly distinguished from the vast majority of extensions which can be safely ignored.  This promotes interoperability by eliminating the need for implementers to prohibit the presence of extensions. For further information, see the [definition of modifier extensions](extensibility.html#modifierExtension).",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "BackboneElement.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "xpath": "@value|f:*|h:div",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "xpath": "exists(f:extension)!=exists(f:*[starts-with(local-name(.), \"value\")])",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": true,
        "isModifierReason": "Modifier extensions are expected to modify the meaning or interpretation of the element that contains them",
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },

      {
        "id": "AcpForm.formQuestions.oID",
        "path": "AcpForm.formQuestions.oID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.oID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.questionnaireOID",
        "path": "AcpForm.formQuestions.questionnaireOID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.questionnaireOID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.formType",
        "path": "AcpForm.formQuestions.formType",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.formType",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.formTypeName",
        "path": "AcpForm.formQuestions.formTypeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.formTypeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.diseaseType",
        "path": "AcpForm.formQuestions.diseaseType",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.diseaseType",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.formQuestions.diseaseTypeName",
        "path": "AcpForm.formQuestions.diseaseTypeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.formQuestions.diseaseTypeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions",
        "path": "AcpForm.worksheetQuestions",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AcpForm.worksheetQuestions",
          "min": 0,
          "max": "*"
        },
        "type": [

          {
            "code": "BackboneElement"
          }            ],
        "isModifier": false
        },

       {"id": "AcpForm.worksheetQuestions.id",
       "path": "AcpForm.worksheetQuestions.id",
       "min": 0,
       "max": "1",
       "base": {
            "path": "Element.id",
            "min": 0,
            "max": "1"
          },
       "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueUrl": "string"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
       },
     {
        "id": "AcpForm.worksheetQuestions.extension",
        "path": "AcpForm.worksheetQuestions.extension",
        "short": "Additional content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "Element.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "xpath": "@value|f:*|h:div",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "xpath": "exists(f:extension)!=exists(f:*[starts-with(local-name(.), \"value\")])",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "id": "AcpForm.worksheetQuestions.modifierExtension",
        "path": "AcpForm.worksheetQuestions.modifierExtension",
        "short": "Extensions that cannot be ignored even if unrecognized",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "requirements": "Modifier extensions allow for extensions that *cannot* be safely ignored to be clearly distinguished from the vast majority of extensions which can be safely ignored.  This promotes interoperability by eliminating the need for implementers to prohibit the presence of extensions. For further information, see the [definition of modifier extensions](extensibility.html#modifierExtension).",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "BackboneElement.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "xpath": "@value|f:*|h:div",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "xpath": "exists(f:extension)!=exists(f:*[starts-with(local-name(.), \"value\")])",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": true,
        "isModifierReason": "Modifier extensions are expected to modify the meaning or interpretation of the element that contains them",
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },

      {
        "id": "AcpForm.worksheetQuestions.oID",
        "path": "AcpForm.worksheetQuestions.oID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.oID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.worksheetType",
        "path": "AcpForm.worksheetQuestions.worksheetType",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.worksheetType",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.worksheetTypeName",
        "path": "AcpForm.worksheetQuestions.worksheetTypeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.worksheetTypeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.diseaseType",
        "path": "AcpForm.worksheetQuestions.diseaseType",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.diseaseType",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.diseaseTypeName",
        "path": "AcpForm.worksheetQuestions.diseaseTypeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.diseaseTypeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.questionOID",
        "path": "AcpForm.worksheetQuestions.questionOID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.questionOID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.questionTitle",
        "path": "AcpForm.worksheetQuestions.questionTitle",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.questionTitle",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.isMandatory",
        "path": "AcpForm.worksheetQuestions.isMandatory",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.isMandatory",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "boolean"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.displayOrder",
        "path": "AcpForm.worksheetQuestions.displayOrder",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.displayOrder",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.statusCode",
        "path": "AcpForm.worksheetQuestions.statusCode",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.statusCode",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.statusCodeName",
        "path": "AcpForm.worksheetQuestions.statusCodeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.statusCodeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.uI_Version",
        "path": "AcpForm.worksheetQuestions.uI_Version",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.uI_Version",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.worksheetQuestions.infoHTML",
        "path": "AcpForm.worksheetQuestions.infoHTML",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.worksheetQuestions.infoHTML",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions",
        "path": "AcpForm.questions",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AcpForm.questions",
          "min": 0,
          "max": "*"
        },
        "type": [

          {
            "code": "BackboneElement"
          }            ],
        "isModifier": false
        },

       {"id": "AcpForm.questions.id",
       "path": "AcpForm.questions.id",
       "min": 0,
       "max": "1",
       "base": {
            "path": "Element.id",
            "min": 0,
            "max": "1"
          },
       "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueUrl": "string"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
       },
     {
        "id": "AcpForm.questions.extension",
        "path": "AcpForm.questions.extension",
        "short": "Additional content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "Element.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "xpath": "@value|f:*|h:div",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "xpath": "exists(f:extension)!=exists(f:*[starts-with(local-name(.), \"value\")])",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "id": "AcpForm.questions.modifierExtension",
        "path": "AcpForm.questions.modifierExtension",
        "short": "Extensions that cannot be ignored even if unrecognized",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "requirements": "Modifier extensions allow for extensions that *cannot* be safely ignored to be clearly distinguished from the vast majority of extensions which can be safely ignored.  This promotes interoperability by eliminating the need for implementers to prohibit the presence of extensions. For further information, see the [definition of modifier extensions](extensibility.html#modifierExtension).",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "BackboneElement.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "xpath": "@value|f:*|h:div",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "xpath": "exists(f:extension)!=exists(f:*[starts-with(local-name(.), \"value\")])",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": true,
        "isModifierReason": "Modifier extensions are expected to modify the meaning or interpretation of the element that contains them",
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },

      {
        "id": "AcpForm.questions.oID",
        "path": "AcpForm.questions.oID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.oID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.questionText",
        "path": "AcpForm.questions.questionText",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.questionText",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.statusCode",
        "path": "AcpForm.questions.statusCode",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.statusCode",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.statusCodeName",
        "path": "AcpForm.questions.statusCodeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.statusCodeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.cSSText",
        "path": "AcpForm.questions.cSSText",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.cSSText",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questions.styleText",
        "path": "AcpForm.questions.styleText",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questions.styleText",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions",
        "path": "AcpForm.questionOptions",
        "min": 0,
        "max": "*",
        "base": {
          "path": "AcpForm.questionOptions",
          "min": 0,
          "max": "*"
        },
        "type": [

          {
            "code": "BackboneElement"
          }            ],
        "isModifier": false
        },

       {"id": "AcpForm.questionOptions.id",
       "path": "AcpForm.questionOptions.id",
       "min": 0,
       "max": "1",
       "base": {
            "path": "Element.id",
            "min": 0,
            "max": "1"
          },
       "type": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type",
                "valueUrl": "string"
              }
            ],
            "code": "http://hl7.org/fhirpath/System.String"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
       },
     {
        "id": "AcpForm.questionOptions.extension",
        "path": "AcpForm.questionOptions.extension",
        "short": "Additional content defined by implementations",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "alias": [
          "extensions",
          "user content"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "Element.extension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "xpath": "@value|f:*|h:div",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "xpath": "exists(f:extension)!=exists(f:*[starts-with(local-name(.), \"value\")])",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": false,
        "isSummary": false,
        "mapping": [
          {
            "identity": "rim",
            "map": "n/a"
          }
        ]
      },
      {
        "id": "AcpForm.questionOptions.modifierExtension",
        "path": "AcpForm.questionOptions.modifierExtension",
        "short": "Extensions that cannot be ignored even if unrecognized",
        "definition": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "comment": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
        "requirements": "Modifier extensions allow for extensions that *cannot* be safely ignored to be clearly distinguished from the vast majority of extensions which can be safely ignored.  This promotes interoperability by eliminating the need for implementers to prohibit the presence of extensions. For further information, see the [definition of modifier extensions](extensibility.html#modifierExtension).",
        "alias": [
          "extensions",
          "user content",
          "modifiers"
        ],
        "min": 0,
        "max": "*",
        "base": {
          "path": "BackboneElement.modifierExtension",
          "min": 0,
          "max": "*"
        },
        "type": [
          {
            "code": "Extension"
          }
        ],
        "constraint": [
          {
            "key": "ele-1",
            "severity": "error",
            "human": "All FHIR elements must have a @value or children",
            "expression": "hasValue() or (children().count() > id.count())",
            "xpath": "@value|f:*|h:div",
            "source": "http://hl7.org/fhir/StructureDefinition/Element"
          },
          {
            "key": "ext-1",
            "severity": "error",
            "human": "Must have either extensions or value[x], not both",
            "expression": "extension.exists() != value.exists()",
            "xpath": "exists(f:extension)!=exists(f:*[starts-with(local-name(.), \"value\")])",
            "source": "http://hl7.org/fhir/StructureDefinition/Extension"
          }
        ],
        "isModifier": true,
        "isModifierReason": "Modifier extensions are expected to modify the meaning or interpretation of the element that contains them",
        "isSummary": true,
        "mapping": [
          {
            "identity": "rim",
            "map": "N/A"
          }
        ]
      },

      {
        "id": "AcpForm.questionOptions.oID",
        "path": "AcpForm.questionOptions.oID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.oID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.questionOID",
        "path": "AcpForm.questionOptions.questionOID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.questionOID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.label",
        "path": "AcpForm.questionOptions.label",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.label",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.type",
        "path": "AcpForm.questionOptions.type",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.type",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.typeRef",
        "path": "AcpForm.questionOptions.typeRef",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.typeRef",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.text",
        "path": "AcpForm.questionOptions.text",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.text",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.value",
        "path": "AcpForm.questionOptions.value",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.value",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.displayOrder",
        "path": "AcpForm.questionOptions.displayOrder",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.displayOrder",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.columnIndex",
        "path": "AcpForm.questionOptions.columnIndex",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.columnIndex",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.cSSText",
        "path": "AcpForm.questionOptions.cSSText",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.cSSText",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.parentOptionOID",
        "path": "AcpForm.questionOptions.parentOptionOID",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.parentOptionOID",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "integer64"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.controlEvents",
        "path": "AcpForm.questionOptions.controlEvents",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.controlEvents",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.sourceCodeSystem",
        "path": "AcpForm.questionOptions.sourceCodeSystem",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.sourceCodeSystem",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.otherAttributes",
        "path": "AcpForm.questionOptions.otherAttributes",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.otherAttributes",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.statusCode",
        "path": "AcpForm.questionOptions.statusCode",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.statusCode",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        },
      {
        "id": "AcpForm.questionOptions.statusCodeName",
        "path": "AcpForm.questionOptions.statusCodeName",
        "min": 0,
        "max": "1",
        "base": {
          "path": "AcpForm.questionOptions.statusCodeName",
          "min": 0,
          "max": "1"
        },
        "type": [

          {
            "code": "string"
          }            ],
        "isModifier": false
        }
          ]
         }
}

