// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Synapxe.FhirWebApi.Relational.IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Environment:Integration")]
    public partial class AppointmentFeature : object, Xunit.IClassFixture<AppointmentFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Environment:Integration"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "appointment.feature"
#line hidden
        
        public AppointmentFeature(AppointmentFeature.FixtureData fixtureData, Synapxe_FhirWebApi_Relational_IntegrationTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Appointment", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
    testRunner.Given("a random tag", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "HeaderName",
                        "Value"});
            table1.AddRow(new string[] {
                        "X-Ihis-SourceApplication",
                        "testapp"});
#line 6
    testRunner.And("a new HttpClient as httpClient", ((string)(null)), table1, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reading a newly created appointment returns exactly the same appointment")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Reading a newly created appointment returns exactly the same appointment")]
        public void ReadingANewlyCreatedAppointmentReturnsExactlyTheSameAppointment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reading a newly created appointment returns exactly the same appointment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 11
    testRunner.Given("a Resource is created from Samples/Appointment.json as createdAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
    testRunner.When("getting Appointment/{createdAppt.Id} as readAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value"});
                table2.AddRow(new string[] {
                            "statusCode",
                            "201"});
#line 13
    testRunner.Then("createdAppt is a Fhir Appointment with data", ((string)(null)), table2, "Then ");
#line hidden
#line 16
    testRunner.And("createdAppt and readAppt are exactly the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create an appointment with a start date in the past returns 422 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Create an appointment with a start date in the past returns 422 status code")]
        [Xunit.InlineDataAttribute("2000-01-01T12:00:00+08:00", new string[0])]
        [Xunit.InlineDataAttribute("1985-01-01T12:00:00+08:00", new string[0])]
        public void CreateAnAppointmentWithAStartDateInThePastReturns422StatusCode(string startDateTime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("startDateTime", startDateTime);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an appointment with a start date in the past returns 422 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table3.AddRow(new string[] {
                            "start",
                            string.Format("{0}", startDateTime),
                            "instant"});
#line 19
    testRunner.Given("a Resource is created from Samples/Appointment.json with data as createdResponse", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table4.AddRow(new string[] {
                            "statusCode",
                            "422",
                            ""});
                table4.AddRow(new string[] {
                            "issue[0].severity",
                            "error",
                            "code"});
                table4.AddRow(new string[] {
                            "issue[0].details.coding[1].code",
                            "ihis-apt-1",
                            "code"});
                table4.AddRow(new string[] {
                            "issue[0].details.coding[1].display",
                            "If present, start SHALL have a higher value than current date time",
                            "string"});
#line 22
    testRunner.Then("createdResponse is a Fhir OperationOutcome with data", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Searching an appointment by patient returns the appointment")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Searching an appointment by patient returns the appointment")]
        public void SearchingAnAppointmentByPatientReturnsTheAppointment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Searching an appointment by patient returns the appointment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table5.AddRow(new string[] {
                            "participant[0].actor",
                            "Patient/{#pat1}",
                            "Reference"});
#line 35
    testRunner.Given("a Resource is created from Samples/Appointment.json with data as newAppt", ((string)(null)), table5, "Given ");
#line hidden
#line 38
    testRunner.When("getting Appointment?patient=Patient/{#pat1} as searchBundle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
    testRunner.Then("searchBundle is a Fhir Bundle which contains newAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Searching an appointment by actor returns the appointment with correct sort")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Searching an appointment by actor returns the appointment with correct sort")]
        public void SearchingAnAppointmentByActorReturnsTheAppointmentWithCorrectSort()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Searching an appointment by actor returns the appointment with correct sort", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table6.AddRow(new string[] {
                            "participant[0].actor",
                            "Patient/{#pat2}",
                            "Reference"});
                table6.AddRow(new string[] {
                            "start",
                            "2125-01-01T12:00:00+08:00",
                            "instant"});
                table6.AddRow(new string[] {
                            "end",
                            "2125-01-01T12:00:00+08:00",
                            "instant"});
#line 42
    testRunner.Given("a Resource is created from Samples/Appointment.json with data as newAppt1", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table7.AddRow(new string[] {
                            "participant[0].actor",
                            "Patient/{#pat3}",
                            "Reference"});
                table7.AddRow(new string[] {
                            "start",
                            "2125-02-01T12:00:00+08:00",
                            "instant"});
                table7.AddRow(new string[] {
                            "end",
                            "2125-02-01T12:00:00+08:00",
                            "instant"});
#line 47
    testRunner.And("a Resource is created from Samples/Appointment.json with data as newAppt2", ((string)(null)), table7, "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table8.AddRow(new string[] {
                            "participant[0].actor",
                            "Patient/{#pat2}",
                            "Reference"});
                table8.AddRow(new string[] {
                            "start",
                            "2125-03-01T12:00:00+08:00",
                            "instant"});
                table8.AddRow(new string[] {
                            "end",
                            "2125-03-01T12:00:00+08:00",
                            "instant"});
#line 52
    testRunner.And("a Resource is created from Samples/Appointment.json with data as newAppt3", ((string)(null)), table8, "And ");
#line hidden
#line 57
    testRunner.When("getting Appointment?actor=Patient/{#pat2}&_sort=_lastUpdated as searchBundle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
    testRunner.Then("searchBundle is a Fhir Bundle which contains newAppt1,newAppt3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Searching an appointment by date returns the appointment")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Searching an appointment by date returns the appointment")]
        public void SearchingAnAppointmentByDateReturnsTheAppointment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Searching an appointment by date returns the appointment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table9.AddRow(new string[] {
                            "start",
                            "2122-01-01T12:00:00+08:00",
                            "instant"});
                table9.AddRow(new string[] {
                            "end",
                            "2122-01-01T12:00:00+08:00",
                            "instant"});
#line 61
    testRunner.Given("a Resource is created from Samples/Appointment.json with data as newAppt", ((string)(null)), table9, "Given ");
#line hidden
#line 65
    testRunner.When("getting Appointment?date=2122-01-01&_tag={currentTag} as searchBundle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
    testRunner.Then("searchBundle is a Fhir Bundle which contains newAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Moving an appointment returns 200")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Moving an appointment returns 200")]
        public void MovingAnAppointmentReturns200()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Moving an appointment returns 200", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 69
    testRunner.Given("a Resource is created from Samples/Appointment.json as createdAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "FhirType"});
                table10.AddRow(new string[] {
                            "days-in-future",
                            "5",
                            "integer"});
#line 70
    testRunner.When("executing operation Appointment/{createdAppt.Id}/$move-appointment-date with data" +
                        " as updatedAppt", ((string)(null)), table10, "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table11.AddRow(new string[] {
                            "statusCode",
                            "200",
                            ""});
#line 73
    testRunner.Then("updatedAppt is a Fhir Appointment with data", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Updating a newly created appointment with an invalid cancellation reason returns " +
            "422")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Updating a newly created appointment with an invalid cancellation reason returns " +
            "422")]
        public void UpdatingANewlyCreatedAppointmentWithAnInvalidCancellationReasonReturns422()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updating a newly created appointment with an invalid cancellation reason returns " +
                    "422", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 78
    testRunner.Given("a Resource is created from Samples/Appointment.json as createdAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table12.AddRow(new string[] {
                            "status",
                            "cancelled",
                            "code"});
                table12.AddRow(new string[] {
                            "cancellationReason",
                            "xyz",
                            "CodeableConcept"});
#line 79
    testRunner.When("updating Appointment/{createdAppt.Id} with data as updatedAppt", ((string)(null)), table12, "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table13.AddRow(new string[] {
                            "statusCode",
                            "422",
                            ""});
                table13.AddRow(new string[] {
                            "issue[0].severity",
                            "error",
                            "code"});
                table13.AddRow(new string[] {
                            "issue[0].code",
                            "code-invalid",
                            "code"});
                table13.AddRow(new string[] {
                            "issue[0].details.text",
                            "Code \'xyz\' does not exist in the value set \'Care Programs\' (http://sypnapxe.sg/fh" +
                                "ir/ValueSet/appointmentCancellationReason)",
                            "code"});
#line 83
    testRunner.Then("updatedAppt is a Fhir OperationOutcome with data", ((string)(null)), table13, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelling a nonexistent appointment returns 404 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Cancelling a nonexistent appointment returns 404 status code")]
        public void CancellingANonexistentAppointmentReturns404StatusCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancelling a nonexistent appointment returns 404 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "FhirType"});
                table14.AddRow(new string[] {
                            "cancellationReason",
                            "lost-interest",
                            "CodeableConcept"});
#line 91
    testRunner.When("executing operation Appointment/{newguid}/$cancel with data as cancellationRespon" +
                        "se", ((string)(null)), table14, "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value"});
                table15.AddRow(new string[] {
                            "statusCode",
                            "404"});
#line 94
    testRunner.Then("cancellationResponse is a Fhir OperationOutcome with data", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelling an appointment with an invalid cancellation reason returns 422 status " +
            "code")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Cancelling an appointment with an invalid cancellation reason returns 422 status " +
            "code")]
        public void CancellingAnAppointmentWithAnInvalidCancellationReasonReturns422StatusCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancelling an appointment with an invalid cancellation reason returns 422 status " +
                    "code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 99
    testRunner.Given("a Resource is created from Samples/Appointment.json as createdAppointment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "FhirType"});
                table16.AddRow(new string[] {
                            "cancellationReason",
                            "abc",
                            "CodeableConcept"});
#line 100
    testRunner.When("executing operation Appointment/{createdAppointment.Id}/$cancel with data as canc" +
                        "ellationResponse", ((string)(null)), table16, "When ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table17.AddRow(new string[] {
                            "statusCode",
                            "422",
                            ""});
                table17.AddRow(new string[] {
                            "issue[0].severity",
                            "error",
                            "code"});
                table17.AddRow(new string[] {
                            "issue[0].code",
                            "code-invalid",
                            "code"});
                table17.AddRow(new string[] {
                            "issue[0].details.text",
                            "Code \'abc\' does not exist in the value set \'Care Programs\' (http://sypnapxe.sg/fh" +
                                "ir/ValueSet/appointmentCancellationReason)",
                            "code"});
#line 103
    testRunner.Then("cancellationResponse is a Fhir OperationOutcome with data", ((string)(null)), table17, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Updating a newly created appointment returns an appointment with an incremented v" +
            "ersionId")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Updating a newly created appointment returns an appointment with an incremented v" +
            "ersionId")]
        public void UpdatingANewlyCreatedAppointmentReturnsAnAppointmentWithAnIncrementedVersionId()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updating a newly created appointment returns an appointment with an incremented v" +
                    "ersionId", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 112
    testRunner.Given("a Resource is created from Samples/Appointment.json as createdAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table18.AddRow(new string[] {
                            "description",
                            "For followup",
                            "string"});
#line 113
    testRunner.When("updating Appointment/{createdAppt.Id} with data as updatedAppt", ((string)(null)), table18, "When ");
#line hidden
#line 116
    testRunner.And("getting Appointment/{createdAppt.Id}/_history/2 as readUpdatedAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
    testRunner.Then("updatedAppt and readUpdatedAppt are exactly the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value"});
                table19.AddRow(new string[] {
                            "statusCode",
                            "200"});
                table19.AddRow(new string[] {
                            "headers.eTag",
                            "W/\"2\""});
#line 118
    testRunner.And("updatedAppt is a Fhir Appointment with data", ((string)(null)), table19, "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table20.AddRow(new string[] {
                            "description",
                            "For followup",
                            "string"});
                table20.AddRow(new string[] {
                            "meta.versionId",
                            "2",
                            "string"});
#line 122
    testRunner.And("readUpdatedAppt is a Fhir Appointment with data", ((string)(null)), table20, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Creating an appointment where same participant is in a different appointment with" +
            " the same schedule returns 422 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Creating an appointment where same participant is in a different appointment with" +
            " the same schedule returns 422 status code")]
        public void CreatingAnAppointmentWhereSameParticipantIsInADifferentAppointmentWithTheSameScheduleReturns422StatusCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating an appointment where same participant is in a different appointment with" +
                    " the same schedule returns 422 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table21.AddRow(new string[] {
                            "participant[0].actor",
                            "Practitioner/{#prac1}",
                            "Reference"});
                table21.AddRow(new string[] {
                            "participant[0].status",
                            "tentative",
                            "code"});
                table21.AddRow(new string[] {
                            "start",
                            "{#schedtime(datetime+2d)}",
                            "instant"});
#line 128
    testRunner.Given("a Resource is created from Samples/Appointment.json with data as existingAppt", ((string)(null)), table21, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table22.AddRow(new string[] {
                            "participant[0].actor",
                            "Practitioner/{#prac1}",
                            "Reference"});
                table22.AddRow(new string[] {
                            "participant[0].status",
                            "tentative",
                            "code"});
                table22.AddRow(new string[] {
                            "start",
                            "{#schedtime(datetime+2d)}",
                            "instant"});
#line 133
    testRunner.When("creating from Samples/Appointment.json with data as createdResponse", ((string)(null)), table22, "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table23.AddRow(new string[] {
                            "statusCode",
                            "422",
                            ""});
                table23.AddRow(new string[] {
                            "issue[0].severity",
                            "error",
                            "code"});
                table23.AddRow(new string[] {
                            "issue[0].code",
                            "invalid",
                            "code"});
                table23.AddRow(new string[] {
                            "issue[0].diagnostics",
                            "Appointment participant has another appointment for that date.",
                            "string"});
#line 138
    testRunner.Then("createdResponse is a Fhir OperationOutcome with data", ((string)(null)), table23, "Then ");
#line hidden
#line 144
    testRunner.And("existingAppt is a Fhir Appointment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancelling an appointment returns appointment with cancelled status and increment" +
            "ed version")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Cancelling an appointment returns appointment with cancelled status and increment" +
            "ed version")]
        public void CancellingAnAppointmentReturnsAppointmentWithCancelledStatusAndIncrementedVersion()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancelling an appointment returns appointment with cancelled status and increment" +
                    "ed version", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 147
    testRunner.Given("a Resource is created from Samples/Appointment.json as createdAppointment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "FhirType"});
                table24.AddRow(new string[] {
                            "cancellationReason",
                            "lost-interest",
                            "CodeableConcept"});
#line 148
    testRunner.When("executing operation Appointment/{createdAppointment.Id}/$cancel with data as canc" +
                        "ellationResponse", ((string)(null)), table24, "When ");
#line hidden
#line 151
    testRunner.And("getting Appointment/{cancellationResponse.Id} as readAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table25.AddRow(new string[] {
                            "statusCode",
                            "200",
                            ""});
                table25.AddRow(new string[] {
                            "meta.versionId",
                            "2",
                            "string"});
                table25.AddRow(new string[] {
                            "status",
                            "cancelled",
                            "code"});
                table25.AddRow(new string[] {
                            "cancellationReason",
                            "lost-interest",
                            "CodeableConcept"});
#line 152
    testRunner.Then("cancellationResponse is a Fhir Appointment with data", ((string)(null)), table25, "Then ");
#line hidden
#line 158
    testRunner.And("cancellationResponse and readAppt are exactly the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Updating an appointment resource with a mismatch of id in the body and path retur" +
            "ns 400 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "Appointment")]
        [Xunit.TraitAttribute("Description", "Updating an appointment resource with a mismatch of id in the body and path retur" +
            "ns 400 status code")]
        public void UpdatingAnAppointmentResourceWithAMismatchOfIdInTheBodyAndPathReturns400StatusCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updating an appointment resource with a mismatch of id in the body and path retur" +
                    "ns 400 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 160
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 161
    testRunner.Given("a Resource is created from Samples/Appointment.json as createdAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table26.AddRow(new string[] {
                            "description",
                            "For followup",
                            "string"});
                table26.AddRow(new string[] {
                            "id",
                            "{newguid}",
                            "id"});
#line 162
    testRunner.When("updating createdAppt with data as updatedAppt", ((string)(null)), table26, "When ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value",
                            "FhirType"});
                table27.AddRow(new string[] {
                            "statusCode",
                            "400",
                            ""});
                table27.AddRow(new string[] {
                            "issue[0].diagnostics",
                            "Resource ID in resource does not match with Resource ID in path.",
                            "string"});
#line 166
    testRunner.Then("updatedAppt is a Fhir OperationOutcome with data", ((string)(null)), table27, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AppointmentFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AppointmentFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
