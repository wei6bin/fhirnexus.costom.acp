// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Synapxe.FhirWebApi.Relational.IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Environment:Integration")]
    public partial class FhirEngineFeature : object, Xunit.IClassFixture<FhirEngineFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Environment:Integration"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "fhirengine.feature"
#line hidden
        
        public FhirEngineFeature(FhirEngineFeature.FixtureData fixtureData, Synapxe_FhirWebApi_Relational_IntegrationTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "FhirEngine", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "HeaderName",
                        "Value"});
#line 5
    testRunner.Given("a new HttpClient as unauthenticatedHttpClient", ((string)(null)), table28, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "HeaderName",
                        "Value"});
            table29.AddRow(new string[] {
                        "X-Ihis-SourceApplication",
                        "testapp"});
#line 7
    testRunner.And("a new HttpClient as authenticatedHttpClient", ((string)(null)), table29, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reading a nonexistent resource from an unauthenticated client returns 401 status " +
            "code")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Reading a nonexistent resource from an unauthenticated client returns 401 status " +
            "code")]
        [Xunit.TraitAttribute("Category", "HttpClient:unauthenticatedHttpClient")]
        public void ReadingANonexistentResourceFromAnUnauthenticatedClientReturns401StatusCode()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:unauthenticatedHttpClient"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reading a nonexistent resource from an unauthenticated client returns 401 status " +
                    "code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("getting Appointment/{newguid} as readAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value"});
                table30.AddRow(new string[] {
                            "statusCode",
                            "401"});
#line 14
    testRunner.Then("readAppt is a Fhir OperationOutcome with data", ((string)(null)), table30, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reading a nonexistent resource from an authenticated client returns 404 status co" +
            "de")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Reading a nonexistent resource from an authenticated client returns 404 status co" +
            "de")]
        [Xunit.TraitAttribute("Category", "HttpClient:authenticatedHttpClient")]
        public void ReadingANonexistentResourceFromAnAuthenticatedClientReturns404StatusCode()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:authenticatedHttpClient"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reading a nonexistent resource from an authenticated client returns 404 status co" +
                    "de", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 20
    testRunner.When("getting Appointment/{newguid} as readAppt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Path",
                            "Value"});
                table31.AddRow(new string[] {
                            "statusCode",
                            "404"});
#line 21
    testRunner.Then("readAppt is a Fhir OperationOutcome with data", ((string)(null)), table31, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Metadata endpoint returns the CapabilityStatement with valid canonical links")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Metadata endpoint returns the CapabilityStatement with valid canonical links")]
        [Xunit.TraitAttribute("Category", "HttpClient:authenticatedHttpClient")]
        public void MetadataEndpointReturnsTheCapabilityStatementWithValidCanonicalLinks()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:authenticatedHttpClient"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Metadata endpoint returns the CapabilityStatement with valid canonical links", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 27
    testRunner.When("getting metadata as metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
    testRunner.Then("metadata is a Fhir CapabilityStatement with resolvable links", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Metadata endpoint is accessible without authentication")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Metadata endpoint is accessible without authentication")]
        [Xunit.TraitAttribute("Category", "HttpClient:unauthenticatedHttpClient")]
        public void MetadataEndpointIsAccessibleWithoutAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:unauthenticatedHttpClient"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Metadata endpoint is accessible without authentication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 32
    testRunner.When("getting metadata as metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
    testRunner.Then("metadata has statusCode 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Health endpoint returns 200 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Health endpoint returns 200 status code")]
        [Xunit.TraitAttribute("Category", "HttpClient:authenticatedHttpClient")]
        public void HealthEndpointReturns200StatusCode()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:authenticatedHttpClient"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Health endpoint returns 200 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 37
    testRunner.When("getting /health?_pretty=true as health", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
    testRunner.Then("health has statusCode 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Swagger endpoint returns 200 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Swagger endpoint returns 200 status code")]
        [Xunit.TraitAttribute("Category", "HttpClient:unauthenticatedHttpClient")]
        public void SwaggerEndpointReturns200StatusCode()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:unauthenticatedHttpClient"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Swagger endpoint returns 200 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 43
    testRunner.When("getting /swagger/v1/swagger.json as openapi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
    testRunner.Then("openapi has statusCode 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prometheus scraping endpoint returns 200 status code")]
        [Xunit.TraitAttribute("FeatureTitle", "FhirEngine")]
        [Xunit.TraitAttribute("Description", "Prometheus scraping endpoint returns 200 status code")]
        [Xunit.TraitAttribute("Category", "HttpClient:unauthenticatedHttpClient")]
        public void PrometheusScrapingEndpointReturns200StatusCode()
        {
            string[] tagsOfScenario = new string[] {
                    "HttpClient:unauthenticatedHttpClient"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prometheus scraping endpoint returns 200 status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 50
    testRunner.When("getting /metrics as metrics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
    testRunner.Then("metrics has statusCode 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FhirEngineFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FhirEngineFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
